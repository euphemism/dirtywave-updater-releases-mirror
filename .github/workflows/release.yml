
name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Bump versions
        id: version
        uses: ./.github/actions/run-in-devenv
        with:
          run: |
            VERSION=$(set-and-sync-package-versions patch)
            echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build app
        id: build
        uses: ./.github/actions/run-in-devenv
        with:
          run: |
            OUT=$(devenv build outputs.dirtywave-updater.bundle.macos --print-out-paths)
            echo "out=$OUT" >> $GITHUB_OUTPUT

      - name: Prepare release metadata
        uses: ./.github/actions/run-in-devenv
        with:
          run: prepare-release "v${{ steps.version.outputs.version }}" "${{ steps.build.outputs.out }}"


# name: Release

# on:
#   push:
#     branches:
#       - main

# jobs:
#   release:
#     env:
#       NIX_CONFIG: "experimental-features = nix-command flakes"
#     runs-on: ubuntu-latest
#     container:
#       image: ghcr.io/cachix/devenv/devenv:latest

#     defaults:
#       run:
#         shell: devenv shell bash -- -e {0}

#     steps:
#       - uses: actions/checkout@v5

#       - name: Determine version bump
#         id: determine-bump
#         run: |
#           LABELS=$(jq -r '.pull_request.labels[].name' < "$GITHUB_EVENT_PATH")

#           if echo "$LABELS" | grep -q "major"; then
#             echo "type=major" >> $GITHUB_OUTPUT
#           elif echo "$LABELS" | grep -q "minor"; then
#             echo "type=minor" >> $GITHUB_OUTPUT
#           else
#             echo "type=patch" >> $GITHUB_OUTPUT
#           fi

#       - name: Sync package versions
#         id: bump
#         run: |
#           VERSION=$(set-and-sync-package-versions ${{ steps.determine-bump.outputs.type }})
#           echo "version=$VERSION" >> $GITHUB_OUTPUT

#       - name: Build app
#         id: build
#         run: |
#           OUT=$(devenv build outputs.dirtywave-updater.bundle.macos --print-out-paths)
#           echo "out=$OUT" >> $GITHUB_OUTPUT

#       - name: Prepare release
#         id: prep
#         run: prepare-release ${{ steps.bump.outputs.version }} ${{ steps.build.outputs.out }}


#       # Commit version bump + latest.json
#       - name: Commit release changes
#         run: |
#           VERSION=${{ steps.bump.outputs.version }}
#           git config user.name "github-actions[bot]"
#           git config user.email "github-actions[bot]@users.noreply.github.com"
#           git add devenv.nix latest.json src-quasar/package.json src-tauri/Cargo.toml
#           git commit -m "feat: release ${VERSION}" || echo "No changes to commit"
#           git push origin HEAD:main

#       - name: Create and push tag
#         run: |
#           VERSION=${{ steps.bump.outputs.version }}
#           if ! git rev-parse "$VERSION" >/dev/null 2>&1; then
#             git tag -a "$VERSION" -m "Release $VERSION"
#             git push origin "$VERSION"
#           fi

#       # Create GitHub Release with proper tag and artifacts
#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v2
#         with:
#           tag_name: ${{ steps.bump.outputs.version }}
#           name: Release ${{ steps.bump.outputs.version }}
#           generate_release_notes: true
#           # body_path: latest.json
#           files: |
#             latest.json
#             ${{ steps.build.outputs.out }}/macos/Dirtywave Updater.app
#             ${{ steps.build.outputs.out }}/macos/Dirtywave Updater.app.tar.gz
#             ${{ steps.build.outputs.out }}/macos/Dirtywave Updater.app.tar.gz.sig
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
